{
	"information_for_contributors": [
		"This file has been converted from https://github.com/atom/language-css/blob/master/grammars/css.cson",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "emdepub.org",
	"scopeName": "source.toml",
	"name": "TOML",
	"fileTypes": [
		"toml"
	],
	"patterns": [
		{
			"include": "#comment-line"
		},
		{
			"include": "#key-equals-value-comment"
		}
	],
	"repository": {
		"comment-line": {
			"begin": "^\\s*(?=#\\s)",
			"end": "$",
			"patterns": [
				{
					"include": "#comment"
				}
			]
		},
		"comment": {
			"match": "(#)\\s+(.*)$",
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.toml"
				},
				"2": {
					"name": "comment.toml"
				}
			}
		},		
		
		"key-equals-value-comment": {
			"patterns": [
				{
					"include": "#key"
				},
				{
					"include": "#equals"
				},
				{
					"include": "#value-comment"
				}
			]
		},
		
		"key": {
			"begin": "^\\s*(?=[\"'A-Za-z0-9_-](.*)\\s*=)",
			"beginCaptures": {
				"0": {
					"name": "red2"
				}
			},
			"end": "\\s*(?==)",
			"endCaptures": {
				"0": {
					"name": "green2"
				}
			},
			"patterns": [
				{
					"include": "#key-bare-or-quote"
				},
				{
					"include": "#dot-key-bare-or-quote"
				}
			]
		},		
		"dot-key-bare-or-quote": {
			"begin": "(\\.)(?!\\s*[.=])",
			"beginCaptures": {
				"1": {
					"name": "blue1"
				}
			},
			"end": "(?=\\s*=)",
			"patterns": [
				{
					"include": "#key-bare-or-quote"
				},
				{
					"include": "#dot-key-bare-or-quote"
				}
			]
		},
		"key-bare-or-quote": {
			"patterns": [
				{
					"include": "#key-bare"
				},
				{
					"include": "#key-quote"
				}
			]
		},
		"key-bare": {
			"match": "[A-Za-z0-9_-]+",
			"name": "red1"
		},
		"key-quote": {
			"patterns": [
				{
					"include": "#key-single-quote"
				},
				{
					"include": "#key-double-quote"
				}
			]
		},
		"key-single-quote": {
			"match": "(')(.*?)(')",
			"captures": {
				"1": {
					"name": "green1"
				},
				"2": {
					"name": "red2"
				},
				"3": {
					"name": "green2"
				}
			}
		},
		"key-double-quote": {
			"match": "(\")(.*?)(\")",
			"captures": {
				"1": {
					"name": "green1"
				},
				"2": {
					"name": "red2"
				},
				"3": {
					"name": "green2"
				}
			}
		},
		
		"equals": {
			"match": "=",
			"name": "punctuation.equals.toml"
		},
		
		"value-comment": {
			"patterns": [
				{
					"include": "#value-single-line-comment"
				},
				{
					"include": "#value-multi-line-comment"
				}
			]
		},
		"value-single-line-comment": {
			"begin": "(?<==)\\s*",
			"end": "$",
			"patterns": [
				{
					"include": "#value-integer-comment"
				}
			]
		},
		"value-multi-line": {
			"begin": "(?<==)\\s*",
			"end": "\\Z",
			"patterns": [
				{
					"include": "#value-string1"
				},
				{
					"include": "#value-integer1"
				},
				{
					"include": "#comment-at-the-end-of-line1"
				}
			]
		},
		
		"value-string": {
			"patterns": [
				{
					"include": "#value-one-double-quote-string"
				},
				{
					"include": "#value-one-single-quote-string"
				},
				{
					"include": "#value-triple-double-quote-string"
				},
				{
					"include": "#value-triple-single-quote-string"
				}
			]
		},
		"value-one-double-quote-string": {
			"match": "\\G(\")([^\"].+?[^\"^\\\\])(\")",
			"captures": {
				"1": {
					"name": "green1"
				},
				"2": {
					"patterns": [
						{
							"include": "#value-string-escape-sequence"
						}
					],
					"name": "red2"
				},
				"3": {
					"name": "green2"
				}
			}
		},
		"value-triple-double-quote-string": {
			"begin": "\\G\"\"\"",
			"beginCaptures": {
				"0": {
					"name": "green1"
				}
			},
			"end": "(\"\"\")\\s*$",
			"endCaptures": {
				"1": {
					"name": "green2"
				}
			},
			"patterns": [
				{
					"include": "#value-string-escape-sequence"
				},
				{
					"include": "#value-triple-double-quote-string-line-ending-backslash"
				}
			]
		},
		"value-one-single-quote-string": {
			"match": "\\G(')([^']+)(')",
			"captures": {
				"1": {
					"name": "green1"
				},
				"2": {
					"name": "red2"
				},
				"3": {
					"name": "green2"
				}
			}
		},
		"value-triple-single-quote-string": {
			"begin": "\\G'''",
			"beginCaptures": {
				"0": {
					"name": "green1"
				}
			},
			"end": "(''')\\s*$",
			"endCaptures": {
				"1": {
					"name": "green2"
				}
			}
		},
		
		"value-string-escape-sequence": {
			"patterns": [
				{
					"include": "#value-string-escape-sequence-four-unicode"
				},
				{
					"include": "#value-string-escape-sequence-eight-unicode"
				},
				{
					"include": "#value-string-escape-sequence-one-character-compact"
				}
			]
		},
		"value-string-escape-sequence-one-character-compact": {
			"match": "(\\\\)([btnfr\\\"\\\\]{1}+)",
			"captures": {
				"1": {
					"name": "blue1"
				},
				"2": {
					"name": "blue2"
				}
			}
		},
		"value-string-escape-sequence-four-unicode": {
			"match": "(\\\\u)([0-9A-E][0-9A-E][0-9A-E][0-9A-E])",
			"captures": {
				"1": {
					"name": "blue1"
				},
				"2": {
					"name": "blue2"
				}
			}
		},
		"value-string-escape-sequence-eight-unicode": {
			"match": "(\\\\U)([0-9A-E][0-9A-E][0-9A-E][0-9A-E][0-9A-E][0-9A-E][0-9A-E][0-9A-E])",
			"captures": {
				"1": {
					"name": "blue1"
				},
				"2": {
					"name": "blue2"
				}
			}
		},
		"value-triple-double-quote-string-line-ending-backslash": {
			"match": "(\\s*?)([\\\\])\\s*?$",
			"captures": {
				"1": {
					"name": "red1"
				},
				"2": {
					"name": "red2"
				}
			}
		},
		
		"value-integer-comment": {
			"patterns": [
				{
					"include": "#value-integer-zero-comment"
				},
				{
					"include": "#value-integer-no-separators-comment"
				},
				{
					"include": "#value-integer-separators-comment"
				}
			]
		},
		"value-integer-zero-comment": {
			"match": "\\G([+-]{0,1}[0]{1})\\s*?(.*$)",
			"captures": {
				"1": {
					"name": "blue1"
				},
				"2": {
					"patterns": [
						{
							"include": "#comment"
						}
					]
				}
			}
		},
		"value-integer-no-separators-comment": {
			"match": "\\G([+-]{0,1}(?=[1-9]{1})[0-9]{1,19}(?=\\s+?#|\\s*?$))\\s*?(.*$)",
			"captures": {
				"1": {
					"name": "red1"
				},
				"2": {
					"patterns": [
						{
							"include": "#comment"
						}
					]
				}
			}
		},
		"value-integer-separators-comment": {
			"match": "\\G(([+-]{0,1})(?=[1-9]{1})(?=.*?_.*?#|.*?_.*?$)((?:[0-9]|(?<=[0-9])_(?=[0-9])){1,38}(?=\\s+?#|\\s*?$)))\\s*?(.*$)",
			"captures": {
				"2": {
					"name": "green2"
				},
				"3": {
					"patterns": [
						{
							"match": "[0-9]",
							"name": "blue1"
						},
						{
							"match": "_",
							"name": "red1"
						}
					]
				},
				"4": {
					"patterns": [
						{
							"include": "#comment"
						}
					]
				}
			}
		}
	}
}